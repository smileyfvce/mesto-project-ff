{"version":3,"file":"main.js","mappings":"mBAIA,IAAMA,EAAY,SAACC,GACjBA,EAAUC,UAAUC,IAAI,mBACxBF,EAAUC,UAAUC,IAAI,qBACxBC,SAASC,iBAAiB,UAAWC,GACrCL,EAAUI,iBAAiB,YAAaE,EAC1C,EAIMC,EAAa,SAACP,GAClBA,EAAUC,UAAUO,OAAO,mBAC3BL,SAASM,oBAAoB,UAAWJ,GACxCL,EAAUS,oBAAoB,YAAaH,EAC7C,EAIMD,EAAc,SAACK,GACnB,GAAgB,WAAZA,EAAIC,IAAkB,CACxB,IAAMC,EAAiBT,SAASU,cAAc,oBAC9CN,EAAWK,EACb,CACF,EAIMN,EAAe,SAACI,GAChBA,EAAII,SAAWJ,EAAIK,eACrBR,EAAWG,EAAIK,cAEnB,ECvBMC,EAAS,CACbC,QAAS,4CACTC,QAAS,CACPC,cAAe,uCACf,eAAgB,qBAMdC,EAAgB,SAACC,GACrB,OAAIA,EAAIC,GACCD,EAAIE,OAGNC,QAAQC,OAAO,WAADC,OAAYL,EAAIM,QACvC,EAuDMC,EAAU,SAACC,GACf,OAAOC,MAAM,GAADJ,OAAIV,EAAOC,QAAO,WAAAS,OAAUG,GAAU,CAChDE,OAAQ,MACRb,QAASF,EAAOE,UACfc,KAAKZ,EACV,EAIMa,EAAa,SAACJ,GAClB,OAAOC,MAAM,GAADJ,OAAIV,EAAOC,QAAO,UAAAS,OAASG,GAAU,CAC/CE,OAAQ,SACRb,QAASF,EAAOE,UACfc,KAAKZ,EACV,EC3FMc,EAAa,SACjBC,EACAC,EACAC,EACAC,EACAC,GAEA,IACMC,EADerC,SAASU,cAAc,kBAAkB4B,QAE3D5B,cAAc,iBACd6B,WAAU,GACPC,EAAYH,EAAW3B,cAAc,gBACrC+B,EAAYJ,EAAW3B,cAAc,gBACrCgC,EAAeL,EAAW3B,cAAc,wBACxCiC,EAAaN,EAAW3B,cAAc,sBACtCkC,EAAYP,EAAW3B,cAAc,qBAkC3C,OAhCA+B,EAAUI,YAAcb,EAAKc,KAC7BN,EAAUO,IAAMf,EAAKgB,KACrBR,EAAUS,IAAM,qBAAH1B,OAAwBS,EAAKc,MAC1CF,EAAUC,YAAcb,EAAKkB,MAAMC,OAG/BC,SAAWpB,EAAKqB,MAAMC,IACxBZ,EAAazC,iBAAiB,SAAS,WACrCiC,EAAmBF,EAAKsB,IAAKjB,EAC/B,KAEAK,EAAaa,MAAMC,QAAU,OAC7Bd,EAAae,UAAW,GAKRP,MAAMQ,KAAMC,KAAOA,KAAKL,IAAMrB,IAE9CU,EAAW7C,UAAUC,IAAI,+BAI3B4C,EAAW1C,iBAAiB,SAAS,WACnC2D,EAASjB,EAAYX,EAAKsB,IAAKV,EACjC,IAGAJ,EAAUvC,iBAAiB,SAAS,kBAClC4D,kBAAkB7B,EAAKgB,KAAMhB,EAAKc,KAAK,IAGlCT,CACT,EAgBMuB,EAAW,SAACjB,EAAYjB,EAAQkB,IACpBD,EAAW7C,UAAUgE,SAAS,+BAAgCrC,EAAUK,GAChFJ,GACLG,MAAK,SAACX,GACLyB,EAAW7C,UAAUiE,OAAO,+BAC5BnB,EAAUC,YAAc3B,EAAIgC,MAAMC,MACpC,IACCa,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACd,GACJ,EC7EMG,EAAmB,CACvBC,aAAc,eACdC,cAAe,gBACfC,qBAAsB,iBACtBC,oBAAqB,yBACrBC,gBAAiB,0BACjBC,WAAY,wBAcRC,EAAiB,SAACC,EAAaC,EAAcT,GACjD,IAAMU,EAAeF,EAAYlE,cAAc,IAADa,OAAKsD,EAAaE,GAAE,WAClEF,EAAa/E,UAAUO,OAAO+D,EAAiBK,iBAC/CK,EAAahF,UAAUO,OAAO+D,EAAiBM,YAC/CI,EAAajC,YAAc,EAC7B,EA0BMmC,EAAe,SAACC,EAAWC,EAAed,IANxB,SAACa,GACvB,OAAOA,EAAUvB,MAAK,SAACmB,GACrB,OAAQA,EAAaM,SAASC,KAChC,GACF,CAGMC,CAAgBJ,IAIlBC,EAAcpF,UAAUO,OAAO+D,EAAiBI,qBAChDU,EAAczB,UAAW,IAJzByB,EAAcpF,UAAUC,IAAIqE,EAAiBI,qBAC7CU,EAAczB,UAAW,EAK7B,EAmCM6B,EAAkB,SAACV,EAAaR,GACpC,IAAMc,EAAgBN,EAAYlE,cAChC0D,EAAiBG,sBAEbU,EAAYM,MAAMC,KACtBZ,EAAYa,iBAAiBrB,EAAiBE,gBAEhDW,EAAUS,SAAQ,SAACb,GACjBF,EAAeC,EAAaC,EAAcT,EAC5C,IACAY,EAAaC,EAAWC,EAAed,EACzC,ECvFMuB,EAAa3F,SAASU,cAAc,iBAIpCkF,EAAc5F,SAASU,cAAc,sBACrCmF,EAAmB7F,SAASU,cAAc,mBAC1CoF,EAAa9F,SAAS+F,MAAM,eAK5BC,GAJchG,SAASU,cAAc,iCAIvBV,SAASU,cAAc,oBACrCuF,EAAajG,SAASU,cAAc,yBACpCwF,EAAmBlG,SAASU,cAAc,oBAC1CyF,EAAkBnG,SAAS+F,MAAM,gBACjCK,EAAYpG,SAASU,cAAc,2BACnC2F,EAAWrG,SAASU,cAAc,kCAIlC4F,EAActG,SAAS+F,MAAM,aAC7BQ,EAAkBvG,SAASU,cAAc,wBACzC8F,EAAqBxG,SAASU,cAClC,gCAEI+F,EAAgBzG,SAASU,cAAc,0BAUvCgG,GANa1G,SAASU,cAAc,qBACxBV,SAASU,cAAc,iBACrBV,SAASU,cAAc,mBAIpBV,SAASU,cAAc,0BACxCiG,EAAiB3G,SAASyF,iBAAiB,iBAC3CmB,EAAa5G,SAASU,cAAc,wBA6F1CW,QAAQwF,IAAI,CHxHHlF,MAAM,GAADJ,OAAIV,EAAOC,QAAO,aAAa,CACzCC,QAASF,EAAOE,UACfc,KAAKZ,GAMDU,MAAM,GAADJ,OAAIV,EAAOC,QAAO,UAAU,CACtCC,QAASF,EAAOE,UACfc,KAAKZ,KG+GPY,MAAK,SAACiF,EAAMC,GAEFD,EAAKxD,IACduC,EAAiBtC,MAAMyD,gBAAkB,QAAHzF,OAAWuF,EAAKG,OAAM,MAC5DjB,EAAYnD,YAAciE,EAAKhE,KAC/BmD,EAAWpD,YAAciE,EAAKI,MAE9BH,EAAMrB,SAAQ,SAACyB,GACb,IAAMC,EAAgBrF,EACpBoF,EACAL,EAAKxD,IACLpB,mBACAC,iBACAC,eAEFuD,EAAW0B,OAAOD,EACpB,GACF,IACCpD,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACd,IDtFuB,SAACG,GACPmB,MAAMC,KACrBxF,SAASyF,iBAAiBrB,EAAiBC,eAEpCqB,SAAQ,SAACd,IAxBM,SAACA,EAAaR,GACtC,IAAMa,EAAYM,MAAMC,KACtBZ,EAAYa,iBAAiBrB,EAAiBE,gBAE1CY,EAAgBN,EAAYlE,cAChC0D,EAAiBG,sBAGnBS,EAAaC,EAAWC,EAAed,GAEvCa,EAAUS,SAAQ,SAACb,GACjBA,EAAa5E,iBAAiB,SAAS,YA7C3B,SAAC2E,EAAaC,EAAcT,GACtCS,EAAaM,SAASmC,gBACxBzC,EAAa0C,kBAAkB1C,EAAa2C,QAAQC,cAEpD5C,EAAa0C,kBAAkB,IAG5B1C,EAAaM,SAASC,MAGzBT,EAAeC,EAAaC,EAAcT,GA5BvB,SAACQ,EAAaC,EAAcT,GACjD,IAAMU,EAAeF,EAAYlE,cAAc,IAADa,OAAKsD,EAAaE,GAAE,WAClEF,EAAa/E,UAAUC,IAAIqE,EAAiBK,iBAC5CK,EAAajC,YAAcgC,EAAa6C,kBACxC5C,EAAahF,UAAUC,IAAIqE,EAAiBM,WAC9C,CAqBIiD,CAAe/C,EAAaC,EAAcT,EAI9C,CAkCMwD,CAAQhD,EAAaC,EAAcT,GACnCY,EAAaC,EAAWC,EAAed,EACzC,GACF,GACF,CASIyD,CAAkBjD,EAAaR,EACjC,GACF,CCmFA0D,CAAiB1D,GAOjByB,EAAiB5F,iBAAiB,SAAS,kBAAML,EAAUgG,EAAY,IAIvEc,EAAezG,iBAAiB,SAAS,WACvCmG,EAAU2B,MAAQ/B,EAAYnD,YAC9BwD,EAAS0B,MAAQ9B,EAAWpD,YAC5ByC,EAAgBY,EAAkB9B,GAClCxE,EAAUsG,EACZ,IAIAU,EAAW3G,iBAAiB,SAAS,WACnCqF,EAAgBiB,EAAiBnC,GACjCxE,EAAU2G,EACZ,IAGAI,EAAejB,SAAQ,SAACsC,GACtBA,EAAO/H,iBAAiB,SAAS,WAC/BG,EAAW4H,EAAOC,QAAQ,UAC5B,GACF,IAKAnC,EAAW7F,iBAAiB,UAhFH,SAACM,GACxBA,EAAI2H,iBACJ,IAAMC,EAAcrC,EAAWpF,cAAc,kBAC7CyH,EAAYtF,YAAc,gBHnCP,SAACuF,GACpB,OAAOzG,MAAM,GAADJ,OAAIV,EAAOC,QAAO,oBAAoB,CAChDc,OAAQ,QACRb,QAASF,EAAOE,QAChBsH,KAAMC,KAAKC,UAAU,CACnBtB,OAAQmB,MAETvG,KAAKZ,EACV,CG4BEuH,CAAaJ,YACVvG,MAAK,SAACiF,GACLjB,EAAiBtC,MAAM,oBAAsB,QAAHhC,OAAWuF,EAAKG,OAAM,MAChE7G,EAAWwF,EACb,IACC5B,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACd,IACCwE,SAAQ,WACPN,EAAYtF,YAAc,WAC5B,GACJ,IAqEAsD,EAAgBlG,iBAAiB,UA9IjC,SAA6ByI,GAC3BA,EAAMR,iBACNlC,EAAYnD,YAAcuD,EAAU2B,MACpC9B,EAAWpD,YAAcwD,EAAS0B,MAClCnI,EAAUsG,EACZ,IA4IAI,EAAYrG,iBAAiB,UAtHP,SAACM,GACrBA,EAAI2H,iBACJ,IAAMC,EAAc7B,EAAY5F,cAAc,kBAC9CyH,EAAYtF,YAAc,gBACR2D,EAAmBuB,MACnBtB,EAAcsB,MH9Cd,SAACY,GACnB,OAAOhH,MAAM,GAADJ,OAAIV,EAAOC,QAAO,UAAU,CACtCc,OAAQ,OACRb,QAASF,EAAOE,QAChBsH,KAAMC,KAAKC,UAAU,CACnBzF,KAAM6F,EAAS7F,KACfE,KAAM2F,EAAS3F,SAEhBnB,KAAKZ,EACV,CG0CE2H,CAAYD,UACT9G,MAAK,SAACsF,GACL,IAAMC,EAAgBrF,EACpBoF,EACAA,EAAK9D,MAAMC,IACXpB,mBACAC,iBACAC,eAEFuD,EAAWkD,QAAQzB,GACnBhH,EAAWmG,GACXD,EAAYwC,OACd,IACC9E,OAAM,SAACC,GAAG,OAAKC,QAAQC,IAAIF,EAAI,IAC/BwE,SAAQ,WACPN,EAAYtF,YAAc,WAC5B,GACJ,G","sources":["webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/pages/index.js"],"sourcesContent":["export { openModal, closeModal };\r\n\r\n// функция открытия попапа\r\n\r\nconst openModal = (popupItem) => {\r\n  popupItem.classList.add(\"popup_is-opened\");\r\n  popupItem.classList.add(\"popup_is-animated\");\r\n  document.addEventListener(\"keydown\", closeEscape);\r\n  popupItem.addEventListener(\"mousedown\", closeOverlay);\r\n}\r\n\r\n// функция закрытия попапа\r\n\r\nconst closeModal = (popupItem) => {\r\n  popupItem.classList.remove(\"popup_is-opened\");\r\n  document.removeEventListener(\"keydown\", closeEscape);\r\n  popupItem.removeEventListener(\"mousedown\", closeOverlay);\r\n}\r\n\r\n// закрыть через Esc\r\n\r\nconst closeEscape = (evt) => {\r\n  if (evt.key === \"Escape\") {\r\n    const openClassModal = document.querySelector(\".popup_is-opened\");\r\n    closeModal(openClassModal);\r\n  }\r\n}\r\n\r\n// закрыть по оверлею\r\n\r\nconst closeOverlay = (evt) => {\r\n  if (evt.target === evt.currentTarget) {\r\n    closeModal(evt.currentTarget);\r\n  }\r\n}\r\n","export {\r\n  getCards,\r\n  getUserInfo,\r\n  updateProfileInfo,\r\n  postNewCard,\r\n  deleteCardfromServer,\r\n  putLike,\r\n  deleteLike,\r\n  updateAvatar,\r\n};\r\n\r\nconst config = {\r\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-42\",\r\n  headers: {\r\n    authorization: \"7d693a10-239b-4e8a-9e6c-5ec746eb9fb2\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\n// Получение ответа от сервера\r\n\r\nconst checkResponse = (res) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  // если ошибка, отклоняем промисы\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n// Получаем информацию о пользователе\r\n\r\nconst getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Получаем карточки с сервера\r\n\r\nconst getCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Обновление информации профиля\r\n\r\nconst updateProfileInfo = (userData) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: userData.name,\r\n      about: userData.about,\r\n    }),\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Создание новой карточки\r\n\r\nconst postNewCard = (cardData) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: cardData.name,\r\n      link: cardData.link,\r\n    }),\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Удаление карточки\r\n\r\nconst deleteCardfromServer = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Получаем лайки\r\n\r\nconst putLike = (cardId) => {\r\n  return fetch(`${config.baseUrl}/likes/${cardId}`, {\r\n    method: \"PUT\",\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Удаление лайка\r\n\r\nconst deleteLike = (cardId) => {\r\n  return fetch(`${config.baseUrl}/lkes/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Обновление аватара\r\n\r\nconst updateAvatar = (avatarLink) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarLink,\r\n    }),\r\n  }).then(checkResponse);\r\n};\r\n","export { createCard, deleteCard, likeCard };\r\nimport { deleteCardfromServer, putLike, deleteLike } from \"./api\";\r\n\r\n// Функция создания карточки\r\n\r\nconst createCard = (\r\n  item,\r\n  userId,\r\n  deleteCardCallback,\r\n  likeCardCallback,\r\n  imageCallback\r\n) => {\r\n  const cardTemplate = document.querySelector(\"#card-template\").content; // темплейт карточки\r\n  const placesItem = cardTemplate\r\n    .querySelector(\".places__item\")\r\n    .cloneNode(true); // карточка\r\n  const cardImage = placesItem.querySelector(\".card__image\"); // картинка\r\n  const cardTitle = placesItem.querySelector(\".card__title\"); // заголовок\r\n  const deleteButton = placesItem.querySelector(\".card__delete-button\"); // кнопка удаления\r\n  const likeButton = placesItem.querySelector(\".card__like-button\"); // кнопка лайка\r\n  const likeCount = placesItem.querySelector(\".card__like-count\"); // счётчик лайка\r\n\r\n  cardTitle.textContent = item.name;\r\n  cardImage.src = item.link;\r\n  cardImage.alt = `Фотография места: ${item.name}`;\r\n  likeCount.textContent = item.likes.length;\r\n\r\n  // Условие (если карта наша, то слушаем кнопку / если нет то прячем корзину)\r\n  if (userid === item.owner._id) {\r\n    deleteButton.addEventListener(\"click\", () => {\r\n      deleteCardCallback(item._id, placesItem);\r\n    });\r\n  } else {\r\n    deleteButton.style.display = \"none\";\r\n    deleteButton.disabled = true;\r\n  }\r\n\r\n  // красим лайки которые лайкали\r\n\r\n  const cardLiked = likes.some((like = like._id = userId));\r\n  if (cardLiked) {\r\n    likeButton.classList.add(\"card__like-button_is-active\");\r\n  }\r\n\r\n  // событие (клик на кнопку лайка)\r\n  likeButton.addEventListener(\"click\", () => {\r\n    likeCard(likeButton, item._id, likeCount);\r\n  });\r\n\r\n  // событие (клик на картинку)\r\n  cardImage.addEventListener(\"click\", () =>\r\n    imageCallbackmage(item.link, item.name)\r\n  );\r\n\r\n  return placesItem;\r\n};\r\n\r\n// Функция удаления карточки\r\n\r\nconst deleteCard = (cardId, placesItem) => {\r\n  deleteCardfromServer(cardId)\r\n    .then(() => {\r\n      placesItem.remove();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\n// Функция лайка\r\n\r\nconst likeCard = (likeButton, cardId, likeCount) => {\r\n  const isLiked = likeButton.classList.contains(\"card__like-button_is-active\")? putLike : deleteLike;\r\n  isLiked(cardId)\r\n    .then((res) => {\r\n      likeButton.classList.toggle(\"card__like-button_is-active\");\r\n      likeCount.textContent = res.likes.length;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n","export { enableValidation, clearValidation, validationConfig };\r\n\r\n// Настройки валидации\r\n\r\nconst validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\",\r\n};\r\n\r\n// Функция показа ошибки\r\n\r\nconst showInputError = (formElement, inputElement, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add(validationConfig.inputErrorClass);\r\n  errorElement.textContent = inputElement.validationMessage;\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n};\r\n\r\n// Функция скрытия ошибки\r\n\r\nconst hideInputError = (formElement, inputElement, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove(validationConfig.inputErrorClass);\r\n  errorElement.classList.remove(validationConfig.errorClass);\r\n  errorElement.textContent = \"\";\r\n};\r\n\r\n// Проверка на валидность\r\n\r\nconst isValid = (formElement, inputElement, validationConfig) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    inputElement.setCustomValidity(\"\");\r\n  }\r\n\r\n  if (!inputElement.validity.valid) {\r\n    showInputError(formElement, inputElement, validationConfig);\r\n  } else {\r\n    hideInputError(formElement, inputElement, validationConfig);\r\n  }\r\n};\r\n\r\n// Реакция кнопок на валидность\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  });\r\n};\r\n\r\nconst toggleButton = (inputList, buttonElement, validationConfig) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n    buttonElement.disabled = true;\r\n  } else {\r\n    buttonElement.classList.remove(validationConfig.inactiveButtonClass);\r\n    buttonElement.disabled = false;\r\n  }\r\n};\r\n\r\n// Слушатели форм\r\n\r\nconst setEventListeners = (formElement, validationConfig) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n\r\n  toggleButton(inputList, buttonElement, validationConfig);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      isValid(formElement, inputElement, validationConfig);\r\n      toggleButton(inputList, buttonElement, validationConfig);\r\n    });\r\n  });\r\n};\r\n\r\n// Валидация\r\n\r\nconst enableValidation = (validationConfig) => {\r\n  const formList = Array.from(\r\n    document.querySelectorAll(validationConfig.formSelector)\r\n  );\r\n  formList.forEach((formElement) => {\r\n    setEventListeners(formElement, validationConfig);\r\n  });\r\n};\r\n\r\n// Очистка ошибок валидации\r\n\r\nconst clearValidation = (formElement, validationConfig) => {\r\n  const buttonElement = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement, validationConfig);\r\n  });\r\n  toggleButton(inputList, buttonElement, validationConfig);\r\n};\r\n","// подключаю стили\r\nimport \"./index.css\";\r\n\r\n// Импорт функций\r\n\r\nimport { openModal, closeModal } from \"../components/modal.js\";\r\nimport { createCard, deleteCard, likeCard } from \"../components/card.js\";\r\nimport {\r\n  enableValidation,\r\n  clearValidation,\r\n  validationConfig,\r\n} from \"../components/validation.js\";\r\nimport {\r\n  getCards,\r\n  getUserInfo,\r\n  updateProfileInfo,\r\n  postNewCard,\r\n  updateAvatar,\r\n} from \"../components/api.js\";\r\n\r\n// DOM узлы\r\n\r\nconst placesList = document.querySelector(\".places__list\");\r\n\r\n// Переменные попапа аватара\r\n\r\nconst popupAvatar = document.querySelector(\".popup_type_avatar\");\r\nconst editAvatarButton = document.querySelector(\".profile__image\");\r\nconst avatarForm = document.forms[\"edit-avatar\"];\r\nconst avatarInput = document.querySelector(\".popup__input_type_avatar-url\");\r\n\r\n// Переменные редактора профиля\r\n\r\nconst profileName = document.querySelector(\".profile__title\");\r\nconst profileJob = document.querySelector(\".profile__description\");\r\nconst popupEditProfile = document.querySelector(\".popup_type_edit\");\r\nconst formEditProfile = document.forms[\"edit-profile\"];\r\nconst nameInput = document.querySelector(\".popup__input_type_name\");\r\nconst jobInput = document.querySelector(\".popup__input_type_description\");\r\n\r\n// Переменные добавления карточки\r\n\r\nconst formAddCard = document.forms[\"new-place\"];\r\nconst popupAddNewCard = document.querySelector(\".popup_type_new-card\");\r\nconst popupInputCardName = document.querySelector(\r\n  \".popup__input_type_card-name\"\r\n);\r\nconst popupInputUrl = document.querySelector(\".popup__input_type_url\");\r\n\r\n// Переменные попапа картинки\r\n\r\nconst popupImage = document.querySelector(\".popup_type_image\");\r\nconst imageCard = document.querySelector(\".popup__image\");\r\nconst captionCard = document.querySelector(\".popup__caption\");\r\n\r\n// кнопки\r\n\r\nconst profileEditBtn = document.querySelector(\".profile__edit-button\");\r\nconst popupCloseBtns = document.querySelectorAll(\".popup__close\");\r\nconst cardAddBtn = document.querySelector(\".profile__add-button\");\r\n\r\n// функции\r\n\r\n// функция открытия картинки\r\n\r\nfunction openImage(name, link) {\r\n  imageCard.src = link;\r\n  imageCard.alt = name;\r\n  captionCard.textContent = name;\r\n  openModal(popupImage);\r\n}\r\n\r\n// Функция редактора профиля\r\n\r\nfunction createProfileSubmit(event) {\r\n  event.preventDefault();\r\n  profileName.textContent = nameInput.value;\r\n  profileJob.textContent = jobInput.value;\r\n  openModal(popupEditProfile);\r\n}\r\n\r\n// функция отправки формы информации о пользователе\r\n\r\nconst profileInfoSubmit = (evt) => {\r\n  evt.preventDefault();\r\n  const popupButton = formEditProfile.querySelector(\".popup__button\");\r\n  popupButton.textContent = \"Сохранение...\";\r\n  updateProfileInfo(nameInput.value, jobInput.value)\r\n    .then((card) => {\r\n      profileName.textContent = card.name;\r\n      profileJob.textContent = card.about;\r\n      closeModal(popupEditProfile);\r\n    })\r\n    .catch((err) => console.log(err))\r\n    .finally(() => {\r\n      popupButton.textContent = \"Сохранить\";\r\n    });\r\n};\r\n\r\n// функция отправки формы добавление новой карточки\r\n\r\nconst addCardSubmit = (evt) => {\r\n  evt.preventDefault();\r\n  const popupButton = formAddCard.querySelector(\".popup__button\");\r\n  popupButton.textContent = \"Сохранение...\";\r\n  const nameImage = popupInputCardName.value;\r\n  const linkImage = popupInputUrl.value;\r\n  const card = {\r\n    name: nameImage,\r\n    link: linkImage,\r\n  };\r\n  postNewCard(cardData)\r\n    .then((card) => {\r\n      const createNewCard = createCard(\r\n        card,\r\n        card.owner._id,\r\n        deleteCardCallback,\r\n        likeCardCallback,\r\n        imageCallback\r\n      );\r\n      placesList.prepend(createNewCard);\r\n      closeModal(popupAddNewCard);\r\n      formAddCard.reset();\r\n    })\r\n    .catch((err) => console.log(err))\r\n    .finally(() => {\r\n      popupButton.textContent = \"Сохранить\";\r\n    });\r\n};\r\n\r\n// функция отправки формы изменения аватара\r\n\r\nconst editAvatarSubmit = (evt) => {\r\n  evt.preventDefault();\r\n  const popupButton = avatarForm.querySelector(\".popup__button\");\r\n  popupButton.textContent = \"Сохранение...\";\r\n  updateAvatar(avatarLink)\r\n    .then((user) => {\r\n      editAvatarButton.style[\"background-image\"] = `url('${user.avatar}')`;\r\n      closeModal(popupAvatar);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .finally(() => {\r\n      popupButton.textContent = \"Сохранить\";\r\n    });\r\n};\r\n\r\n// Выполняем запросы\r\n\r\nlet userId;\r\nPromise.all([getUserInfo(), getCards()])\r\n  .then((user, cards) => {\r\n    // информация\r\n    userId = user._id;\r\n    editAvatarButton.style.backgroundImage = `url('${user.avatar}')`\r\n    profileName.textContent = user.name;\r\n    profileJob.textContent = user.about;\r\n    // карточки\r\n    cards.forEach((card) => {\r\n      const createNewCard = createCard(\r\n        card,\r\n        user._id,\r\n        deleteCardCallback,\r\n        likeCardCallback,\r\n        imageCallback\r\n      );\r\n      placesList.append(createNewCard);\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n\r\n// вызов включения валидации\r\n\r\nenableValidation(validationConfig);\r\n\r\n// СОБЫТИЯ\r\n\r\n// события по клику\r\n// открытие редактора аватара\r\n\r\neditAvatarButton.addEventListener(\"click\", () => openModal(popupAvatar));\r\n\r\n// открытие редактора профиля\r\n\r\nprofileEditBtn.addEventListener(\"click\", () => {\r\n  nameInput.value = profileName.textContent;\r\n  jobInput.value = profileJob.textContent;\r\n  clearValidation(popupEditProfile, validationConfig);\r\n  openModal(popupEditProfile);\r\n});\r\n\r\n// открытие попапа добавления карточки\r\n\r\ncardAddBtn.addEventListener(\"click\", () => {\r\n  clearValidation(popupAddNewCard, validationConfig);\r\n  openModal(popupAddNewCard);\r\n});\r\n// закрытие попапов\r\n\r\npopupCloseBtns.forEach((button) => {\r\n  button.addEventListener(\"click\", () => {\r\n    closeModal(button.closest(\".popup\"));\r\n  });\r\n});\r\n\r\n// события по сабмиту\r\n// форма изменения аватара\r\n\r\navatarForm.addEventListener('submit', editAvatarSubmit)\r\n\r\n// форма редактирования профиля\r\n\r\nformEditProfile.addEventListener(\"submit\", createProfileSubmit);\r\n\r\n// добавление карточки\r\nformAddCard.addEventListener(\"submit\", addCardSubmit);\r\n\r\n\r\n// чистилище\r\n\r\n// Вывести карточки на страницу\r\n\r\n// initialCards.forEach((item) => {\r\n//  const card = createCard(item, deleteCard, likedCard, openImage);\r\n//  placesList.append(card);\r\n//});\r\n"],"names":["openModal","popupItem","classList","add","document","addEventListener","closeEscape","closeOverlay","closeModal","remove","removeEventListener","evt","key","openClassModal","querySelector","target","currentTarget","config","baseUrl","headers","authorization","checkResponse","res","ok","json","Promise","reject","concat","status","putLike","cardId","fetch","method","then","deleteLike","createCard","item","userId","deleteCardCallback","likeCardCallback","imageCallback","placesItem","content","cloneNode","cardImage","cardTitle","deleteButton","likeButton","likeCount","textContent","name","src","link","alt","likes","length","userid","owner","_id","style","display","disabled","some","like","likeCard","imageCallbackmage","contains","toggle","catch","err","console","log","validationConfig","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","hideInputError","formElement","inputElement","errorElement","id","toggleButton","inputList","buttonElement","validity","valid","hasInvalidInput","clearValidation","Array","from","querySelectorAll","forEach","placesList","popupAvatar","editAvatarButton","avatarForm","forms","profileName","profileJob","popupEditProfile","formEditProfile","nameInput","jobInput","formAddCard","popupAddNewCard","popupInputCardName","popupInputUrl","profileEditBtn","popupCloseBtns","cardAddBtn","all","user","cards","backgroundImage","avatar","about","card","createNewCard","append","patternMismatch","setCustomValidity","dataset","errorMessage","validationMessage","showInputError","isValid","setEventListeners","enableValidation","value","button","closest","preventDefault","popupButton","avatarLink","body","JSON","stringify","updateAvatar","finally","event","cardData","postNewCard","prepend","reset"],"sourceRoot":""}